# -*- coding: utf-8 -*-
"""Module03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GuW31MIpFBRwlbOeDsDkb1UlDvgq6eCb
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity

#Load raw data

f_path = '/youtube.csv'
df = pd.read_csv(f_path)

#Data Cleaning

#Shorthand parsing function to replace string representations
def parse_shorthand(s):
    if isinstance(s, str):
        s = s.strip().upper().replace(',', '')
        if 'K' in s:
            return float(s.replace('K', '')) * 1e3
        elif 'M' in s:
            return float(s.replace('M', '')) * 1e6
        elif 'B' in s:
            return float(s.replace('B', '')) * 1e9
        else:
            try:
                return float(s)
            except ValueError:
                return np.nan
    return s

#Convert shorthand columns to numeric representation
df['VIDEOS_NUM'] = df['TOTAL_NUMBER_OF_VIDEOS'].apply(parse_shorthand)
df['SUBSCRIBERS_NUM'] = df['SUBSCRIBERS'].apply(parse_shorthand)
df['VIEWS_NUM'] = df['VIEWS'].apply(parse_shorthand)

#Drop rows with missing values
features_df = df[['NAME_OF_CHANNEL', 'VIDEOS_NUM', 'SUBSCRIBERS_NUM', 'VIEWS_NUM']].dropna()

#Get the top 30 rows from the cleaned features_df for analysis use
df_cleaned = features_df.head(30).reset_index(drop=True)

print(df_cleaned)

#Cosine similarity analysis

#Select and scale numeric features
features = df_cleaned[['VIDEOS_NUM', 'SUBSCRIBERS_NUM', 'VIEWS_NUM']]
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

#Find the index of T-Series in df_cleaned
tseries_index = df_cleaned[df_cleaned['NAME_OF_CHANNEL'] == 'T-Series'].index[0]

#Compute cosine similarity between T-Series and all channels
cos_sim = cosine_similarity([features_scaled[tseries_index]], features_scaled)[0]

#Create a new DataFrame with respective similarity scores
similarity_df = pd.DataFrame({
    'NAME_OF_CHANNEL': df_cleaned['NAME_OF_CHANNEL'],
    'SIMILARITY_TO_TSERIES': cos_sim
}).sort_values(by='SIMILARITY_TO_TSERIES', ascending=False).reset_index(drop=True)

#Display the top 10 results
print(similarity_df.head(11))